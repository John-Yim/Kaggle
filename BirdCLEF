{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91844,"databundleVersionId":11361821,"sourceType":"competition"},{"sourceId":369063,"sourceType":"modelInstanceVersion","modelInstanceId":305646,"modelId":326102},{"sourceId":379846,"sourceType":"modelInstanceVersion","modelInstanceId":313926,"modelId":334337},{"sourceId":381222,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":314910,"modelId":335377}],"dockerImageVersionId":31011,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os, json\nimport torch\nimport torchaudio\nimport timm\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nimport torch.nn as nn\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nfrom torchaudio.transforms import MelSpectrogram, AmplitudeToDB\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nfrom multiprocessing import cpu_count\n\n# ✅ 설정\nSOUNDSCAPE_DIR = '/kaggle/input/birdclef-2025/test_soundscapes'\nMODEL_PATH = '/kaggle/input/birdclefefficient_full/pytorch/default/1/best_model.pth'\nLABEL_PATH = '/kaggle/input/birdclefefficient_full/pytorch/default/1/label_list.json'\n\nSAMPLE_RATE = 32000\nDURATION = 5.0\nNUM_SAMPLES = int(SAMPLE_RATE * DURATION)\nN_MELS = 128\nN_FFT = 1024\nHOP_LENGTH = 512\nFMIN = 50\nFMAX = 14000\nTARGET_SHAPE = (256, 256)\nDEVICE = torch.device(\"cpu\")\n\n# ✅ label_list 로드\nwith open(LABEL_PATH, 'r') as f:\n    label_list = json.load(f)\n\n# ✅ 모델 정의 및 로딩\nclass BirdCLEFModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.backbone = timm.create_model('efficientnet_b0', pretrained=False, in_chans=1, num_classes=0)\n        self.classifier = nn.Linear(self.backbone.num_features, len(label_list))\n\n    def forward(self, x):\n        x = self.backbone(x)\n        return self.classifier(x)\n\nmodel = BirdCLEFModel().to(DEVICE)\nmodel.load_state_dict(torch.load(MODEL_PATH, map_location=DEVICE))\nmodel.eval()\n\n# ✅ 전처리 정의\nmel_transform = nn.Sequential(\n    MelSpectrogram(\n        sample_rate=SAMPLE_RATE,\n        n_fft=N_FFT,\n        hop_length=HOP_LENGTH,\n        n_mels=N_MELS,\n        f_min=FMIN,\n        f_max=FMAX\n    ),\n    AmplitudeToDB()\n)\n\n# ✅ 추론 함수\ndef predict_file(path):\n    results = []\n    try:\n        waveform, sr = torchaudio.load(path)\n        waveform = waveform.mean(dim=0, keepdim=True)\n        if sr != SAMPLE_RATE:\n            waveform = torchaudio.transforms.Resample(sr, SAMPLE_RATE)(waveform)\n\n        basename = os.path.basename(path).replace('.ogg', '')\n        for i, start in enumerate(range(0, waveform.shape[1] - NUM_SAMPLES + 1, NUM_SAMPLES)):\n            clip = waveform[:, start:start + NUM_SAMPLES]\n            mel = mel_transform(clip)\n            mel = torch.nn.functional.interpolate(mel.unsqueeze(0), size=TARGET_SHAPE, mode=\"bilinear\", align_corners=False).squeeze(0)\n            mel = mel.unsqueeze(0).to(DEVICE)  # (1, 1, 256, 256)\n\n            with torch.inference_mode():\n                output = model(mel)\n                prob = torch.sigmoid(output).cpu().numpy()[0]\n\n            row_id = f\"{basename}_{(i + 1) * 5}\"\n            results.append((row_id, prob))\n    except Exception as e:\n        print(f\"[ERROR] {path}: {e}\")\n    return results\n\n# ✅ 실행\nif __name__ == '__main__':\n    ogg_paths = sorted([os.path.join(SOUNDSCAPE_DIR, f) for f in os.listdir(SOUNDSCAPE_DIR) if f.endswith('.ogg')])\n\n    row_ids, predictions = [], []\n    with ThreadPoolExecutor(max_workers=cpu_count()) as executor:\n        futures = {executor.submit(predict_file, path): path for path in ogg_paths}\n        for future in tqdm(as_completed(futures), total=len(futures), desc=\"Predicting\"):\n            for row_id, prob in future.result():\n                row_ids.append(row_id)\n                predictions.append(prob)\n\n    submission = pd.DataFrame(predictions, columns=label_list)\n    submission.insert(0, 'row_id', row_ids)\n    submission = submission.sort_values('row_id').reset_index(drop=True)\n    submission.to_csv('/kaggle/working/submission.csv', index=False)\n    print(submission.head())","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}